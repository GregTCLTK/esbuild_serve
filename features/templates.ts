import { copySync } from "https://deno.land/std@0.152.0/fs/copy.ts";
import { serveConfig } from "../types.ts";
import { ensureNestedFolderExists } from "./filesystem.ts";

export function provideTemplate(id: string, outdir: string, template: string, c: serveConfig) {
    if (id.endsWith("/"))
        throw new Error(`${id} is not allowed to end with a slash`);
    ensureNestedFolderExists(id, outdir);
    try {
        copySync(`${template}/${id}.html`, `${outdir}/${id}.html`);
    } catch {
        try {
            fallbackTemplate(c, template, outdir, id);
        } catch (_) {
            autoGeneratedTemplate(outdir, id);
        }
    }
}

export function autoGeneratedTemplate(outdir: string, id: string) {
    const fallbackName = id.split("/").at(-1);

    Deno.writeTextFileSync(`${outdir}/${id}.html`, `<link rel="stylesheet" href="${fallbackName}.css"><script src="${fallbackName}.js" type="module"></script>`, { create: true });
}

export function fallbackTemplate(c: serveConfig, template: string, outdir: string, id: string) {
    const fallbackName = id.split("/").at(-1);

    if (!c.preventTemplateRootFallback)
        copySync(`${template}/${fallbackName}.html`, `${outdir}/${id}.html`);
    else
        console.error(`ðŸ¥² Couldn't find template for ${id}`);
}